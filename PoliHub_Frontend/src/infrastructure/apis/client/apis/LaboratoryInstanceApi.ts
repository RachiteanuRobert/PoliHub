/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LaboratoryInstanceAddDTO,
  LaboratoryInstanceDTORequestResponse,
  LaboratoryInstanceUpdateDTO,
  RequestResponse,
} from '../models';
import {
    LaboratoryInstanceAddDTOFromJSON,
    LaboratoryInstanceAddDTOToJSON,
    LaboratoryInstanceDTORequestResponseFromJSON,
    LaboratoryInstanceDTORequestResponseToJSON,
    LaboratoryInstanceUpdateDTOFromJSON,
    LaboratoryInstanceUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiLaboratoryInstanceAddPostRequest {
    laboratoryInstanceAddDTO?: LaboratoryInstanceAddDTO;
}

export interface ApiLaboratoryInstanceDeleteIdDeleteRequest {
    id: string;
}

export interface ApiLaboratoryInstanceGetByIdIdGetRequest {
    id: string;
}

export interface ApiLaboratoryInstanceUpdatePutRequest {
    laboratoryInstanceUpdateDTO?: LaboratoryInstanceUpdateDTO;
}

/**
 * 
 */
export class LaboratoryInstanceApi extends runtime.BaseAPI {

    /**
     */
    async apiLaboratoryInstanceAddPostRaw(requestParameters: ApiLaboratoryInstanceAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/LaboratoryInstance/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LaboratoryInstanceAddDTOToJSON(requestParameters.laboratoryInstanceAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLaboratoryInstanceAddPost(requestParameters: ApiLaboratoryInstanceAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiLaboratoryInstanceAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLaboratoryInstanceDeleteIdDeleteRaw(requestParameters: ApiLaboratoryInstanceDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiLaboratoryInstanceDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/LaboratoryInstance/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLaboratoryInstanceDeleteIdDelete(requestParameters: ApiLaboratoryInstanceDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiLaboratoryInstanceDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLaboratoryInstanceGetByIdIdGetRaw(requestParameters: ApiLaboratoryInstanceGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LaboratoryInstanceDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiLaboratoryInstanceGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/LaboratoryInstance/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LaboratoryInstanceDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLaboratoryInstanceGetByIdIdGet(requestParameters: ApiLaboratoryInstanceGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LaboratoryInstanceDTORequestResponse> {
        const response = await this.apiLaboratoryInstanceGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLaboratoryInstanceUpdatePutRaw(requestParameters: ApiLaboratoryInstanceUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/LaboratoryInstance/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LaboratoryInstanceUpdateDTOToJSON(requestParameters.laboratoryInstanceUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLaboratoryInstanceUpdatePut(requestParameters: ApiLaboratoryInstanceUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiLaboratoryInstanceUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
