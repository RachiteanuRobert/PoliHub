/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CourseAddDTO,
  CourseDTOPagedResponseRequestResponse,
  CourseDTORequestResponse,
  CourseUpdateDTO,
  RequestResponse,
  UserToCourseAddDTO,
} from '../models';
import {
    CourseAddDTOFromJSON,
    CourseAddDTOToJSON,
    CourseDTOPagedResponseRequestResponseFromJSON,
    CourseDTOPagedResponseRequestResponseToJSON,
    CourseDTORequestResponseFromJSON,
    CourseDTORequestResponseToJSON,
    CourseUpdateDTOFromJSON,
    CourseUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
    UserToCourseAddDTOFromJSON,
    UserToCourseAddDTOToJSON,
} from '../models';

export interface ApiCourseAddPostRequest {
    courseAddDTO?: CourseAddDTO;
}

export interface ApiCourseAddUserToCoursePostRequest {
    userToCourseAddDTO?: UserToCourseAddDTO;
}

export interface ApiCourseDeleteIdDeleteRequest {
    id: string;
}

export interface ApiCourseGetByIdIdGetRequest {
    id: string;
}

export interface ApiCourseGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiCourseUpdatePutRequest {
    courseUpdateDTO?: CourseUpdateDTO;
}

/**
 * 
 */
export class CourseApi extends runtime.BaseAPI {

    /**
     */
    async apiCourseAddPostRaw(requestParameters: ApiCourseAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Course/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CourseAddDTOToJSON(requestParameters.courseAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCourseAddPost(requestParameters: ApiCourseAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiCourseAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCourseAddUserToCoursePostRaw(requestParameters: ApiCourseAddUserToCoursePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Course/AddUserToCourse`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToCourseAddDTOToJSON(requestParameters.userToCourseAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCourseAddUserToCoursePost(requestParameters: ApiCourseAddUserToCoursePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiCourseAddUserToCoursePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCourseDeleteIdDeleteRaw(requestParameters: ApiCourseDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCourseDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Course/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCourseDeleteIdDelete(requestParameters: ApiCourseDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiCourseDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCourseGetByIdIdGetRaw(requestParameters: ApiCourseGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCourseGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Course/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCourseGetByIdIdGet(requestParameters: ApiCourseGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseDTORequestResponse> {
        const response = await this.apiCourseGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCourseGetPageGetRaw(requestParameters: ApiCourseGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Course/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCourseGetPageGet(requestParameters: ApiCourseGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseDTOPagedResponseRequestResponse> {
        const response = await this.apiCourseGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCourseUpdatePutRaw(requestParameters: ApiCourseUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Course/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CourseUpdateDTOToJSON(requestParameters.courseUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCourseUpdatePut(requestParameters: ApiCourseUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiCourseUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
