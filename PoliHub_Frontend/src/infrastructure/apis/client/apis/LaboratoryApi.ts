/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LaboratoryAddDTO,
  LaboratoryDTOPagedResponseRequestResponse,
  LaboratoryDTORequestResponse,
  LaboratoryUpdateDTO,
  RequestResponse,
} from '../models';
import {
    LaboratoryAddDTOFromJSON,
    LaboratoryAddDTOToJSON,
    LaboratoryDTOPagedResponseRequestResponseFromJSON,
    LaboratoryDTOPagedResponseRequestResponseToJSON,
    LaboratoryDTORequestResponseFromJSON,
    LaboratoryDTORequestResponseToJSON,
    LaboratoryUpdateDTOFromJSON,
    LaboratoryUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiLaboratoryAddPostRequest {
    laboratoryAddDTO?: LaboratoryAddDTO;
}

export interface ApiLaboratoryDeleteIdDeleteRequest {
    id: string;
}

export interface ApiLaboratoryGetByIdIdGetRequest {
    id: string;
}

export interface ApiLaboratoryGetByNameGetRequest {
    assistantName: string;
}

export interface ApiLaboratoryGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiLaboratoryUpdatePutRequest {
    laboratoryUpdateDTO?: LaboratoryUpdateDTO;
}

/**
 * 
 */
export class LaboratoryApi extends runtime.BaseAPI {

    /**
     */
    async apiLaboratoryAddPostRaw(requestParameters: ApiLaboratoryAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Laboratory/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LaboratoryAddDTOToJSON(requestParameters.laboratoryAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLaboratoryAddPost(requestParameters: ApiLaboratoryAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiLaboratoryAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLaboratoryDeleteIdDeleteRaw(requestParameters: ApiLaboratoryDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiLaboratoryDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Laboratory/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLaboratoryDeleteIdDelete(requestParameters: ApiLaboratoryDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiLaboratoryDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLaboratoryGetByIdIdGetRaw(requestParameters: ApiLaboratoryGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LaboratoryDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiLaboratoryGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Laboratory/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LaboratoryDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLaboratoryGetByIdIdGet(requestParameters: ApiLaboratoryGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LaboratoryDTORequestResponse> {
        const response = await this.apiLaboratoryGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLaboratoryGetByNameGetRaw(requestParameters: ApiLaboratoryGetByNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LaboratoryDTORequestResponse>> {
        if (requestParameters.assistantName === null || requestParameters.assistantName === undefined) {
            throw new runtime.RequiredError('assistantName','Required parameter requestParameters.assistantName was null or undefined when calling apiLaboratoryGetByNameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Laboratory/GetByName`.replace(`{${"assistantName"}}`, encodeURIComponent(String(requestParameters.assistantName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LaboratoryDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLaboratoryGetByNameGet(requestParameters: ApiLaboratoryGetByNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LaboratoryDTORequestResponse> {
        const response = await this.apiLaboratoryGetByNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLaboratoryGetPageGetRaw(requestParameters: ApiLaboratoryGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LaboratoryDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Laboratory/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LaboratoryDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLaboratoryGetPageGet(requestParameters: ApiLaboratoryGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LaboratoryDTOPagedResponseRequestResponse> {
        const response = await this.apiLaboratoryGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLaboratoryUpdatePutRaw(requestParameters: ApiLaboratoryUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Laboratory/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LaboratoryUpdateDTOToJSON(requestParameters.laboratoryUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLaboratoryUpdatePut(requestParameters: ApiLaboratoryUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiLaboratoryUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
