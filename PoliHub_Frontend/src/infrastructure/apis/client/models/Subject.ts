/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Course } from './Course';
import {
    CourseFromJSON,
    CourseFromJSONTyped,
    CourseToJSON,
} from './Course';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Subject
 */
export interface Subject {
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof Subject
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Subject
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    year?: string;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    semester?: string;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    department?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    creditsNo?: string;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    description?: string | null;
    /**
     * 
     * @type {Array<Course>}
     * @memberof Subject
     */
    courses?: Array<Course> | null;
    /**
     * 
     * @type {Array<User>}
     * @memberof Subject
     */
    students?: Array<User> | null;
}

/**
 * Check if a given object implements the Subject interface.
 */
export function instanceOfSubject(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SubjectFromJSON(json: any): Subject {
    return SubjectFromJSONTyped(json, false);
}

export function SubjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subject {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'year': !exists(json, 'year') ? undefined : json['year'],
        'semester': !exists(json, 'semester') ? undefined : json['semester'],
        'department': !exists(json, 'department') ? undefined : json['department'],
        'creditsNo': !exists(json, 'creditsNo') ? undefined : json['creditsNo'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'courses': !exists(json, 'courses') ? undefined : (json['courses'] === null ? null : (json['courses'] as Array<any>).map(CourseFromJSON)),
        'students': !exists(json, 'students') ? undefined : (json['students'] === null ? null : (json['students'] as Array<any>).map(UserFromJSON)),
    };
}

export function SubjectToJSON(value?: Subject | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'name': value.name,
        'year': value.year,
        'semester': value.semester,
        'department': value.department,
        'creditsNo': value.creditsNo,
        'description': value.description,
        'courses': value.courses === undefined ? undefined : (value.courses === null ? null : (value.courses as Array<any>).map(CourseToJSON)),
        'students': value.students === undefined ? undefined : (value.students === null ? null : (value.students as Array<any>).map(UserToJSON)),
    };
}

