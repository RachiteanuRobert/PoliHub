/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CourseInstanceSimpleDTO } from './CourseInstanceSimpleDTO';
import {
    CourseInstanceSimpleDTOFromJSON,
    CourseInstanceSimpleDTOFromJSONTyped,
    CourseInstanceSimpleDTOToJSON,
} from './CourseInstanceSimpleDTO';
import type { CourseSimpleDTO } from './CourseSimpleDTO';
import {
    CourseSimpleDTOFromJSON,
    CourseSimpleDTOFromJSONTyped,
    CourseSimpleDTOToJSON,
} from './CourseSimpleDTO';
import type { LaboratoryInstanceSimpleDTO } from './LaboratoryInstanceSimpleDTO';
import {
    LaboratoryInstanceSimpleDTOFromJSON,
    LaboratoryInstanceSimpleDTOFromJSONTyped,
    LaboratoryInstanceSimpleDTOToJSON,
} from './LaboratoryInstanceSimpleDTO';
import type { LaboratorySimpleDTO } from './LaboratorySimpleDTO';
import {
    LaboratorySimpleDTOFromJSON,
    LaboratorySimpleDTOFromJSONTyped,
    LaboratorySimpleDTOToJSON,
} from './LaboratorySimpleDTO';
import type { SubjectSimpleDTO } from './SubjectSimpleDTO';
import {
    SubjectSimpleDTOFromJSON,
    SubjectSimpleDTOFromJSONTyped,
    SubjectSimpleDTOToJSON,
} from './SubjectSimpleDTO';
import type { UserRoleEnum } from './UserRoleEnum';
import {
    UserRoleEnumFromJSON,
    UserRoleEnumFromJSONTyped,
    UserRoleEnumToJSON,
} from './UserRoleEnum';

/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    email?: string | null;
    /**
     * 
     * @type {UserRoleEnum}
     * @memberof UserDTO
     */
    role?: UserRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    group?: string | null;
    /**
     * 
     * @type {Array<CourseSimpleDTO>}
     * @memberof UserDTO
     */
    courseUsers?: Array<CourseSimpleDTO> | null;
    /**
     * 
     * @type {Array<LaboratorySimpleDTO>}
     * @memberof UserDTO
     */
    laboratoryUsers?: Array<LaboratorySimpleDTO> | null;
    /**
     * 
     * @type {Array<SubjectSimpleDTO>}
     * @memberof UserDTO
     */
    subjectUsers?: Array<SubjectSimpleDTO> | null;
    /**
     * 
     * @type {Array<LaboratoryInstanceSimpleDTO>}
     * @memberof UserDTO
     */
    laboratoryInstanceUsers?: Array<LaboratoryInstanceSimpleDTO> | null;
    /**
     * 
     * @type {Array<CourseInstanceSimpleDTO>}
     * @memberof UserDTO
     */
    courseInstanceUsers?: Array<CourseInstanceSimpleDTO> | null;
}

/**
 * Check if a given object implements the UserDTO interface.
 */
export function instanceOfUserDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserDTOFromJSON(json: any): UserDTO {
    return UserDTOFromJSONTyped(json, false);
}

export function UserDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'role': !exists(json, 'role') ? undefined : UserRoleEnumFromJSON(json['role']),
        'group': !exists(json, 'group') ? undefined : json['group'],
        'courseUsers': !exists(json, 'courseUsers') ? undefined : (json['courseUsers'] === null ? null : (json['courseUsers'] as Array<any>).map(CourseSimpleDTOFromJSON)),
        'laboratoryUsers': !exists(json, 'laboratoryUsers') ? undefined : (json['laboratoryUsers'] === null ? null : (json['laboratoryUsers'] as Array<any>).map(LaboratorySimpleDTOFromJSON)),
        'subjectUsers': !exists(json, 'subjectUsers') ? undefined : (json['subjectUsers'] === null ? null : (json['subjectUsers'] as Array<any>).map(SubjectSimpleDTOFromJSON)),
        'laboratoryInstanceUsers': !exists(json, 'laboratoryInstanceUsers') ? undefined : (json['laboratoryInstanceUsers'] === null ? null : (json['laboratoryInstanceUsers'] as Array<any>).map(LaboratoryInstanceSimpleDTOFromJSON)),
        'courseInstanceUsers': !exists(json, 'courseInstanceUsers') ? undefined : (json['courseInstanceUsers'] === null ? null : (json['courseInstanceUsers'] as Array<any>).map(CourseInstanceSimpleDTOFromJSON)),
    };
}

export function UserDTOToJSON(value?: UserDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'email': value.email,
        'role': UserRoleEnumToJSON(value.role),
        'group': value.group,
        'courseUsers': value.courseUsers === undefined ? undefined : (value.courseUsers === null ? null : (value.courseUsers as Array<any>).map(CourseSimpleDTOToJSON)),
        'laboratoryUsers': value.laboratoryUsers === undefined ? undefined : (value.laboratoryUsers === null ? null : (value.laboratoryUsers as Array<any>).map(LaboratorySimpleDTOToJSON)),
        'subjectUsers': value.subjectUsers === undefined ? undefined : (value.subjectUsers === null ? null : (value.subjectUsers as Array<any>).map(SubjectSimpleDTOToJSON)),
        'laboratoryInstanceUsers': value.laboratoryInstanceUsers === undefined ? undefined : (value.laboratoryInstanceUsers === null ? null : (value.laboratoryInstanceUsers as Array<any>).map(LaboratoryInstanceSimpleDTOToJSON)),
        'courseInstanceUsers': value.courseInstanceUsers === undefined ? undefined : (value.courseInstanceUsers === null ? null : (value.courseInstanceUsers as Array<any>).map(CourseInstanceSimpleDTOToJSON)),
    };
}

