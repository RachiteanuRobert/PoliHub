/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Laboratory } from './Laboratory';
import {
    LaboratoryFromJSON,
    LaboratoryFromJSONTyped,
    LaboratoryToJSON,
} from './Laboratory';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface LaboratoryUser
 */
export interface LaboratoryUser {
    /**
     * 
     * @type {string}
     * @memberof LaboratoryUser
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof LaboratoryUser
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof LaboratoryUser
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof LaboratoryUser
     */
    laboratoryId?: string;
    /**
     * 
     * @type {string}
     * @memberof LaboratoryUser
     */
    userId?: string;
    /**
     * 
     * @type {Laboratory}
     * @memberof LaboratoryUser
     */
    laboratory?: Laboratory;
    /**
     * 
     * @type {User}
     * @memberof LaboratoryUser
     */
    user?: User;
}

/**
 * Check if a given object implements the LaboratoryUser interface.
 */
export function instanceOfLaboratoryUser(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LaboratoryUserFromJSON(json: any): LaboratoryUser {
    return LaboratoryUserFromJSONTyped(json, false);
}

export function LaboratoryUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): LaboratoryUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'laboratoryId': !exists(json, 'laboratoryId') ? undefined : json['laboratoryId'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'laboratory': !exists(json, 'laboratory') ? undefined : LaboratoryFromJSON(json['laboratory']),
        'user': !exists(json, 'user') ? undefined : UserFromJSON(json['user']),
    };
}

export function LaboratoryUserToJSON(value?: LaboratoryUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'laboratoryId': value.laboratoryId,
        'userId': value.userId,
        'laboratory': LaboratoryToJSON(value.laboratory),
        'user': UserToJSON(value.user),
    };
}

